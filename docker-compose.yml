version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: ecoride-postgres
    environment:
      POSTGRES_DB: ecoride
      POSTGRES_USER: ecoride
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ecoride_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/database.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - ecoride-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecoride -d ecoride"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de données MongoDB pour les logs
  mongodb:
    image: mongo:5.0-focal
    container_name: ecoride-mongodb
    environment:
      MONGO_INITDB_DATABASE: ecoride
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./migrations/mongodb_data.json:/docker-entrypoint-initdb.d/init-data.json:ro
    networks:
      - ecoride-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/ecoride --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Application EcoRide
  ecoride-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ecoride-app
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ecoride
      DB_PASSWORD: ${DB_PASSWORD:-ecoride_password}
      DB_DATABASE: ecoride
      MONGODB_URI: mongodb://mongodb:27017/ecoride
      JWT_SECRET: ${JWT_SECRET:-default_secret_change_in_production}
      PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - ecoride-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse proxy Nginx
  nginx:
    image: nginx:alpine
    container_name: ecoride-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - ecoride-network
    depends_on:
      - ecoride-app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service de monitoring et métriques
  monitoring:
    image: prom/prometheus:latest
    container_name: ecoride-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ecoride-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

# Réseaux
networks:
  ecoride-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes persistants
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local 